// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mempool.proto

package qitmeer_p2p_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MemPoolRequest struct {
	TxsNum               uint64   `protobuf:"varint,1,opt,name=txsNum,proto3" json:"txsNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemPoolRequest) Reset()         { *m = MemPoolRequest{} }
func (m *MemPoolRequest) String() string { return proto.CompactTextString(m) }
func (*MemPoolRequest) ProtoMessage()    {}
func (*MemPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a84c3667d8c2093a, []int{0}
}
func (m *MemPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemPoolRequest.Merge(m, src)
}
func (m *MemPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *MemPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MemPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MemPoolRequest proto.InternalMessageInfo

func (m *MemPoolRequest) GetTxsNum() uint64 {
	if m != nil {
		return m.TxsNum
	}
	return 0
}

type MemPoolRespond struct {
	TxsNum               uint64   `protobuf:"varint,1,opt,name=txsNum,proto3" json:"txsNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemPoolRespond) Reset()         { *m = MemPoolRespond{} }
func (m *MemPoolRespond) String() string { return proto.CompactTextString(m) }
func (*MemPoolRespond) ProtoMessage()    {}
func (*MemPoolRespond) Descriptor() ([]byte, []int) {
	return fileDescriptor_a84c3667d8c2093a, []int{1}
}
func (m *MemPoolRespond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MemPoolRespond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MemPoolRespond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MemPoolRespond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemPoolRespond.Merge(m, src)
}
func (m *MemPoolRespond) XXX_Size() int {
	return m.Size()
}
func (m *MemPoolRespond) XXX_DiscardUnknown() {
	xxx_messageInfo_MemPoolRespond.DiscardUnknown(m)
}

var xxx_messageInfo_MemPoolRespond proto.InternalMessageInfo

func (m *MemPoolRespond) GetTxsNum() uint64 {
	if m != nil {
		return m.TxsNum
	}
	return 0
}

func init() {
	proto.RegisterType((*MemPoolRequest)(nil), "qitmeer.p2p.v1.MemPoolRequest")
	proto.RegisterType((*MemPoolRespond)(nil), "qitmeer.p2p.v1.MemPoolRespond")
}

func init() { proto.RegisterFile("mempool.proto", fileDescriptor_a84c3667d8c2093a) }

var fileDescriptor_a84c3667d8c2093a = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0xcd, 0x2d,
	0xc8, 0xcf, 0xcf, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2b, 0xcc, 0x2c, 0xc9, 0x4d,
	0x4d, 0x2d, 0xd2, 0x2b, 0x30, 0x2a, 0xd0, 0x2b, 0x33, 0x54, 0xd2, 0xe0, 0xe2, 0xf3, 0x4d, 0xcd,
	0x0d, 0xc8, 0xcf, 0xcf, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x2b,
	0xa9, 0x28, 0xf6, 0x2b, 0xcd, 0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09, 0x82, 0xf2, 0x50, 0x54,
	0x16, 0x17, 0xe4, 0xe7, 0xa5, 0xe0, 0x52, 0xe9, 0x24, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47,
	0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0xb6, 0xdc, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x84, 0x19, 0x81, 0x0d, 0x8d, 0x00, 0x00, 0x00,
}

func (m *MemPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TxsNum != 0 {
		i = encodeVarintMempool(dAtA, i, uint64(m.TxsNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MemPoolRespond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemPoolRespond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MemPoolRespond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TxsNum != 0 {
		i = encodeVarintMempool(dAtA, i, uint64(m.TxsNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMempool(dAtA []byte, offset int, v uint64) int {
	offset -= sovMempool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MemPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxsNum != 0 {
		n += 1 + sovMempool(uint64(m.TxsNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MemPoolRespond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxsNum != 0 {
		n += 1 + sovMempool(uint64(m.TxsNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMempool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMempool(x uint64) (n int) {
	return sovMempool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MemPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMempool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsNum", wireType)
			}
			m.TxsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMempool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxsNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMempool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMempool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMempool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemPoolRespond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMempool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemPoolRespond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemPoolRespond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsNum", wireType)
			}
			m.TxsNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMempool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxsNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMempool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMempool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMempool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMempool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMempool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMempool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMempool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMempool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMempool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMempool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMempool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMempool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMempool = fmt.Errorf("proto: unexpected end of group")
)
